name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Add workflow-level permissions
permissions:
  contents: read
  packages: write
  actions: read
  checks: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test Job
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: cdb_mosh_p1_ecommerce_app_tu
        ports:
          - 3308:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Wait for MySQL
      run: |
        for i in {1..30}; do
          if mysqladmin ping -h 127.0.0.1 -P 3308 -u root -ptestpassword --silent; then
            echo "MySQL is ready"
            break
          fi
          echo "Waiting for MySQL..."
          sleep 2
        done

    - name: Run tests
      run: |
        chmod +x ./mvnw
        ./mvnw clean test -Dspring.profiles.active=tu
      env:
        DB_USERNAME: root
        DB_PASSWORD: testpassword
        DB_HOST: localhost
        DB_PORT: 3308

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit

  # Build and Push Docker Image
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Production Server
  deploy:
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        echo "Adding ${{ secrets.SERVER_HOST }} to known hosts..."
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || {
          echo "ssh-keyscan failed, trying without -H flag..."
          ssh-keyscan ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || {
            echo "ssh-keyscan still failed, adding host key manually..."
            echo "${{ secrets.SERVER_HOST }} ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGXw+56QoZj7L8b8gXj9M3v4JkHgNp1/VpE2VJ0w7Q9Z" >> ~/.ssh/known_hosts
          }
        }
        echo "Known hosts file:"
        cat ~/.ssh/known_hosts

    - name: Test SSH connection
      run: |
        echo "Testing SSH connection to ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}..."
        ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=accept-new ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo 'SSH connection successful!' && whoami && pwd"

    - name: Create deployment directory
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          sudo mkdir -p /opt/mosh-store
          sudo chown ${{ secrets.SERVER_USER }}:${{ secrets.SERVER_USER }} /opt/mosh-store
          echo 'Deployment directory created successfully'
        "

    - name: Copy deployment files
      run: |
        echo "Copying deployment files..."
        scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/mosh-store/
        scp -o StrictHostKeyChecking=no -r docker/ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/mosh-store/ || true
        echo "Files copied successfully"

    - name: Create environment file
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          cd /opt/mosh-store &&
          echo 'Creating environment file...' &&
          echo 'DB_HOST=mysql' > .env &&
          echo 'DB_PORT=3306' >> .env &&
          echo 'DB_NAME=cdb_mosh_p1_ecommerce_app_prod' >> .env &&
          echo 'DB_USERNAME=${{ secrets.DB_USERNAME }}' >> .env &&
          echo 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' >> .env &&
          echo 'SPRING_PROFILES_ACTIVE=prod' >> .env &&
          echo 'APP_PORT=8080' >> .env &&
          echo 'NGINX_PORT=80' >> .env &&
          echo 'NGINX_SSL_PORT=443' >> .env &&
          echo 'COMPOSE_PROJECT_NAME=mosh-store' >> .env &&
          echo 'Environment file created' &&
          ls -la .env
        "

    - name: Login to GitHub Container Registry on server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          echo '${{ secrets.GITHUB_TOKEN }}' | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
        "

    - name: Deploy application
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          cd /opt/mosh-store &&
          echo 'Pulling latest images...' &&
          docker compose pull &&
          echo 'Stopping existing containers...' &&
          docker compose down || true &&
          echo 'Starting new containers...' &&
          docker compose up -d &&
          echo 'Waiting for application to start...' &&
          for i in {1..30}; do
            if curl -f http://localhost:8080/api/v1/ > /dev/null 2>&1; then
              echo 'Application is healthy!'
              break
            fi
            echo 'Waiting for application...'
            sleep 10
          done &&
          echo 'Showing running containers:' &&
          docker compose ps
        "

    - name: Verify deployment
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          cd /opt/mosh-store &&
          echo 'Checking if containers are running...' &&
          if [ \$(docker compose ps -q | wc -l) -eq 0 ]; then
            echo 'ERROR: No containers are running!'
            exit 1
          fi &&
          echo 'Checking application health...' &&
          if ! curl -f http://localhost:8080/api/v1/ > /dev/null 2>&1; then
            echo 'ERROR: Application health check failed!'
            docker compose logs app
            exit 1
          fi &&
          echo 'Deployment successful!'
        "

  # Cleanup old images (optional)
  cleanup:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read

    steps:
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Cleanup old Docker images
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          echo 'Cleaning up unused Docker images...' &&
          docker image prune -f &&
          echo 'Cleanup completed'
        " || true 